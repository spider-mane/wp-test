<?php

namespace WebTheory\WpTest\Manager\Traits;

use WebTheory\WpTest\Exceptions\WPDieException;

trait WhateverThisIsTrait
{
    /**
     * Retrieves the `wp_die()` handler.
     *
     * @param callable $handler The current die handler.
     * @return callable The test die handler.
     */
    public function get_wp_die_handler($handler)
    {
        return [$this, 'wp_die_handler'];
    }

    /**
     * Throws an exception when called.
     *
     * @since UT (3.7.0)
     * @since 5.9.0 Added the `$title` and `$args` parameters.
     *
     * @throws WPDieException Exception containing the message and the response code.
     *
     * @param string|WP_Error $message The `wp_die()` message or WP_Error object.
     * @param string          $title   The `wp_die()` title.
     * @param string|array    $args    The `wp_die()` arguments.
     */
    public function wp_die_handler($message, $title, $args)
    {
        if (is_wp_error($message)) {
            $message = $message->get_error_message();
        }

        if (!is_scalar($message)) {
            $message = '0';
        }

        $code = 0;
        if (isset($args['response'])) {
            $code = $args['response'];
        }

        throw new WPDieException($message, $code);
    }

    /**
     * Converts a microtime string into a float.
     *
     * @since 4.1.0
     *
     * @param string $microtime Time string generated by `microtime()`.
     * @return float `microtime()` output as a float.
     */
    protected function _microtime_to_float($microtime)
    {
        $time_array = explode(' ', $microtime);

        return array_sum($time_array);
    }

    protected function somethingAboutHooks()
    {
        // remove_theme_support('html5');
        // remove_filter('query', array($this, '_create_temporary_tables'));
        // remove_filter('query', array($this, '_drop_temporary_tables'));
        // remove_filter('wp_die_handler', array($this, 'get_wp_die_handler'));
        // $this->restoreHooks();
    }
}
